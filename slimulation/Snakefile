import numpy as np
import os, sys, subprocess, glob, json
from pathlib import Path

rng = np.random.default_rng(seed=666)

if os.path.exists('logs'):
    pass
else:
    os.makedirs('logs/')
output_dir = 'out/'
zarr_pattern = '../../locator_work/locator_slim/zarrs/sigma_{sigma}_bias_{mu}/run_{rep}.zarr'
gt_dir = os.path.join(output_dir, 'genotypes/')
ts_dir = os.path.join(output_dir, 'training_sets/')
metadata_dir = os.path.join(output_dir, 'metadata/')
loc_dir = os.path.join(output_dir, 'predlocs/')


# wildcards
sigmas = [0.4, 0.6, 0.8, 1]
mus = [0]
#mus = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
sim_replicates = np.arange(10)
skews = [0.6, 0.7, 0.8, 0.9]
ts_replicates = np.arange(10)

mdpattern = "sigma_{sigma}_bias_{mu}_run_{rep}"
fpattern = "sigma_{sigma}_bias_{mu}_run_{rep}_{tsrep}"
files = expand(fpattern, sigma=sigmas, mu=mus, rep=sim_replicates, tsrep=ts_replicates)
#files = [fpattern.replace("{sigma}", str(s)).replace("{mu}", str(m)).replace("{rep}", str(r)) if m < s else None for m in mus for s in sigmas for r in sim_replicates]

localrules: all

rule all:
    input: expand(loc_dir + fpattern + '_uniform_predlocs.txt', sigma=sigmas, mu=mus, rep=sim_replicates, tsrep=ts_replicates) +
            expand(loc_dir + fpattern + '_skew_{skew}_predlocs.txt', sigma=sigmas, mu=mus, rep=sim_replicates, skew=skews, tsrep=ts_replicates)

rule make_ts:
    input: 
        md = metadata_dir + mdpattern + '_metadata.txt',
        gt = zarr_pattern
    params: ts_dir + fpattern
    output:
        uniform = ts_dir + fpattern + '_uniform_ts.txt',
        skews = [ts_dir + fpattern + '_skew_' + str(s) + '_ts.txt' for s in skews]
    conda: 'py39'
    shell: 'python ../scripts/sample_training_set.py --metadata {input.md} --zarr {input.gt} --out {params}'

rule locate_uniform:
    input:
        ts = ts_dir + fpattern + '_uniform_ts.txt',
        gt = zarr_pattern
    params: loc_dir + fpattern + '_uniform'
    output: loc_dir + fpattern + '_uniform_predlocs.txt'
    conda: 'locating'
    resources:
        runtime=30,
        mem_mb=300000,
        partition='gpu2',
        gpus=1,
        constraint='gpu-10gb'
    shell:
        """
        module load cuda/11.5.1
        python ../../locator/scripts/locator.py --zarr {input.gt} --sample_data {input.ts} --max_SNPs 100000 --out {params} --keep_weights
        """

rule locate_skew:
    input: 
        ts = ts_dir + fpattern + '_skew_{skew}_ts.txt',
        gt = zarr_pattern
    params: loc_dir + fpattern + '_skew_{skew}'
    output: loc_dir + fpattern + '_skew_{skew}_predlocs.txt'
    conda: 'locating'
    resources:
        runtime=30,
        mem_mb=300000,
        partition='gpu2',
        gpus=1,
        constraint='gpu-10gb'
    shell:
        """
        module load cuda/11.5.1
        python ../../locator/scripts/locator.py --zarr {input.gt} --sample_data {input.ts} --max_SNPs 100000 --out {params} --keep_weights
        """

