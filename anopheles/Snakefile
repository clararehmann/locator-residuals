import numpy as np
import os, sys, subprocess, glob, json
from pathlib import Path

os.makedirs('logs', exist_ok=True)

rng = np.random.default_rng(seed=666)

# running Locator on ag1000g data
gtpath = os.path.join('snp_genotypes_all', '{chrom}')

# debug params
"""
chromosomes = ['2L']
training_sets = [0]

"""
chromosomes = ['2L','2R','3L','3R','X']
training_sets = np.arange(10)

rule all:
    input: expand( 'predlocs/{chrom}_{ts}_complete.txt', chrom=chromosomes, ts=training_sets )

rule download:
    output: 'download_complete.txt'
    conda: 'gsutil'
    resources:
        runtime=300
    shell: 'bash ../scripts/ag1000g_download.sh'

rule sortdata:
    input: 'download_complete.txt'
    output:
        metadata = 'ag1000g_v3_gambiae.txt',
        zarr = [directory(i) for i in expand( gtpath, chrom=chromosomes)],
        genotype = [directory(i) for i in expand( gtpath + '/calldata/GT', chrom=chromosomes )],
        samples = [directory(i) for i in expand( gtpath + '/samples', chrom=chromosomes )]
    conda: 'py39'
    shell: 'python ../scripts/ag1000g_data_sort.py'

rule make_ts:
    input: 'ag1000g_v3_gambiae.txt'
    output: expand( 'training_sets/ag1000g_ts_{ts}.txt', ts=training_sets )
    conda: 'py39'
    shell: 'python ../scripts/make_empirical_ts.py --metadata {input} --pred_prop 0.1 --out training_sets/ag1000g_ts'

rule run_locator:
    input:
        gt = 'snp_genotypes_all/{chrom}/',
        ts = 'training_sets/ag1000g_ts_{ts}.txt'
    output: 'predlocs/{chrom}_{ts}_complete.txt'
    conda: 'locating'
    resources: 
        runtime=1000,
        mem_mb=200000,
        partition='gpu2',
        gpus=1,
        constraint='gpu-10gb'
    log: 'logs/{chrom}_{ts}.log'
    shell: 
        """
        module load cuda/11.5.1
        python ../scripts/locator.py --sample_data {input.ts} --zarr {input.gt} --out predlocs/{wildcards.chrom}_{wildcards.ts} --windows --window_size 2000000 &> {log}
        """
